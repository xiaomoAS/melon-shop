{"version":3,"file":"service.js","sources":["utils/service.js"],"sourcesContent":["import Request from '@/utils/luch-request/index.js'\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n\t// 开发环境\r\n\tvar baseURL = 'http://127.0.0.1:4523/m1/6785558-6497977-default'; //域名(网站启动时的域名)，目前用这个 js（【注意】记住改manifest.josn 源码视图中的h5配置）\r\n} else {\r\n\t// 生产环境\r\n\t// var baseURL = 'http://dev-cn.your-api-server.com'; //域名(网站启动时的域名)，目前用这个 js\r\n}\r\n\r\nconst http = new Request()\r\n\r\n\r\n// setConfig 这里只会执行一次。\r\nhttp.setConfig((config) => {\r\n\t/* 设置全局配置 */\r\n\tconfig.baseURL = baseURL\r\n\tconfig.header = {\r\n\t\t...config.header,\r\n\t}\r\n\treturn config\r\n})\r\n\r\n// 请求拦截\r\nhttp.interceptors.request.use((config) => { // 可使用async await 做异步操作\r\n\r\n\t//是否显示等待框\r\n\tlet show = config.custom.show ? config.custom.show : false;\r\n\tif (show) {\r\n\t\tlet title_name = show != true ? show : \"\";\r\n\t\tuni.showLoading({\r\n\t\t\ttitle: title_name,\r\n\t\t\tmask:true,//是否显示透明蒙层，防止触摸穿透，默认：false\r\n\t\t});\r\n\t}\r\n\r\n\tconfig.header = {\r\n\t\t...config.header,\r\n\t\t'Token': uni.getStorageSync('token'),\r\n\t}\r\n\treturn config\r\n}, (err) => {\r\n\treturn Promise.reject(err)\r\n})\r\n\r\n// 防止重复刷新标志位\r\nlet isRefreshing = false\r\n// 重试队列，每一项将是一个待执行的函数形式\r\nlet requests = []\r\n\r\n// 响应拦截 \r\nhttp.interceptors.response.use((response) => {\r\n\tconst token = uni.getStorageSync('token')\r\n\tconst refresh_token = uni.getStorageSync('refresh_token')\r\n\tif (response) {\r\n\t\tconsole.log('封装后 结果（1）：', response)\r\n\t\t\r\n\t\t//是否取消显示等待框\r\n\t\tlet show = response.config.custom.show ? response.config.custom.show : false;\n\t\tif (show) {\n\t\t\tuni.hideLoading();\n\t\t}\r\n\t\t\r\n\t\tswitch (response.data.error_code) {\r\n\t\t\tcase 200:\r\n\t\t\t\tbreak\r\n\t\t\tcase 401:\r\n\t\t\t\tconst config = response.config\r\n\t\t\t\tlet newToken;\r\n\t\t\t\tif (!isRefreshing) {\r\n\t\t\t\t\tisRefreshing = true\r\n\t\t\t\t\treturn uni.request({\r\n\t\t\t\t\t\turl: baseURL + '/api/v1/Jwtapi/refreshToken',\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\theader: {\r\n\t\t\t\t\t\t\t'token': token,\r\n\t\t\t\t\t\t\t'refresh-token': refresh_token\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).then(res => {\r\n\t\t\t\t\t\tconsole.log('重新获取token');\r\n\t\t\t\t\t\tif (res.data && res.data.code == 41000) {\r\n\t\t\t\t\t\t\t//有值，并且状态码是 41000，表示重新生成了token，否者就删除token\r\n\t\t\t\t\t\t\tnewToken = uni.setStorageSync('token', res.data.token);\r\n\r\n\t\t\t\t\t\t\t//这里可以把 refresh_token 一起重新存（也可以不存，到期后重新登录）\r\n\t\t\t\t\t\t\tnewToken = uni.setStorageSync('refresh_token', res.data.refresh_token);\r\n\t\t\t\t\t\t\tconsole.log('token重新生成，成功');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log('token过期，重新登录');\r\n\t\t\t\t\t\t\tuni.showToast({\r\n\t\t\t\t\t\t\t\ttitle: '令牌过期，请重新登录！',\r\n\t\t\t\t\t\t\t\ticon: 'error',\r\n\t\t\t\t\t\t\t\tsuccess() {\r\n\t\t\t\t\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t\t\t\t\t//这里是要执行的方法或者代码\r\n\t\t\t\t\t\t\t\t\t\tuni.removeStorageSync('token');\r\n\t\t\t\t\t\t\t\t\t\tuni.removeStorageSync('refresh_token');\r\n\t\t\t\t\t\t\t\t\t\tuni.navigateTo({\r\n\t\t\t\t\t\t\t\t\t\t\turl: '/pages/user_login/login/login'\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}, 2000) //延迟时间，1000是1秒\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\treturn http.request(config)\r\n\t\t\t\t\t\trequests.forEach(cb => cb(newToken))\r\n\t\t\t\t\t\trequests = []\r\n\r\n\t\t\t\t\t}).finally(() => {\r\n\t\t\t\t\t\tisRefreshing = false\r\n\t\t\t\t\t})\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\t\t\trequests.push((newToken) => {\r\n\t\t\t\t\t\t\t// config.header.Authorization = newToken\r\n\t\t\t\t\t\t\tconfig.header.token = newToken\r\n\t\t\t\t\t\t\tresolve(http.request(config))\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn Promise.reject(response)\r\n\r\n\t\t\tcase 431:\r\n\t\t\t\tuni.showModal({\r\n\t\t\t\t\ttitle: '提示',\r\n\t\t\t\t\tcontent: response.data.msg ? response.data.msg : '账号已在其他地方登录！',\r\n\t\t\t\t\tshowCancel: false, //是否显示取消按钮，默认为 true\r\n\t\t\t\t\tsuccess: function(res) {\r\n\t\t\t\t\t\tconsole.log(res)\r\n\t\t\t\t\t\tif (res.confirm) {\r\n\t\t\t\t\t\t\t// console.log('用户点击确定');\r\n\t\t\t\t\t\t\t//账号在别的地方登录，清空token\r\n\t\t\t\t\t\t\tuni.removeStorageSync('token');\r\n\t\t\t\t\t\t\tuni.removeStorageSync('refresh_token');\r\n\r\n\t\t\t\t\t\t\tuni.navigateTo({\r\n\t\t\t\t\t\t\t\turl: '/pages/user_login/login/login'\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t} else if (res.cancel) {\r\n\t\t\t\t\t\t\t// console.log('用户点击取消');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.reject(response)\r\n\t\t\tdefault:\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t//完全成功，返回数据\r\n\treturn response['data']\r\n}, err => {\r\n\treturn Promise.reject(err)\r\n})\r\n\r\nexport {\r\n\thttp,\r\n\tbaseURL\r\n}"],"names":["baseURL","Request","uni"],"mappings":"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"}