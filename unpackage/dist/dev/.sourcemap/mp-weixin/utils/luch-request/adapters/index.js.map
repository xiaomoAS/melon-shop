{"version":3,"file":"index.js","sources":["utils/luch-request/adapters/index.js"],"sourcesContent":["import buildURL from '../helpers/buildURL'\r\nimport buildFullPath from '../core/buildFullPath'\r\nimport settle from '../core/settle'\r\nimport {isUndefined} from \"../utils\"\r\n\r\n/**\r\n * 返回可选值存在的配置\r\n * @param {Array} keys - 可选值数组\r\n * @param {Object} config2 - 配置\r\n * @return {{}} - 存在的配置项\r\n */\r\nconst mergeKeys = (keys, config2) => {\r\n  let config = {}\r\n  keys.forEach(prop => {\r\n    if (!isUndefined(config2[prop])) {\r\n      config[prop] = config2[prop]\r\n    }\r\n  })\r\n  return config\r\n}\r\nexport default (config) => {\r\n  return new Promise((resolve, reject) => {\r\n    let fullPath = buildURL(buildFullPath(config.baseURL, config.url), config.params, config.paramsSerializer)\r\n    const _config = {\r\n      url: fullPath,\r\n      header: config.header,\r\n      complete: (response) => {\r\n        config.fullPath = fullPath\r\n        response.config = config\r\n        response.rawData = response.data\r\n        try {\r\n          let jsonParseHandle = false\r\n          const forcedJSONParsingType = typeof config.forcedJSONParsing\r\n          if (forcedJSONParsingType === 'boolean') {\r\n            jsonParseHandle = config.forcedJSONParsing\r\n          } else if (forcedJSONParsingType === 'object') {\r\n            const includesMethod = config.forcedJSONParsing.include || []\r\n            jsonParseHandle = includesMethod.includes(config.method)\r\n          }\r\n\r\n          // 对可能字符串不是json 的情况容错\r\n          if (jsonParseHandle && typeof response.data === 'string') {\r\n            response.data = JSON.parse(response.data)\r\n          }\r\n          // eslint-disable-next-line no-empty\r\n        } catch (e) {\r\n        }\r\n        settle(resolve, reject, response)\r\n      }\r\n    }\r\n    let requestTask\r\n    if (config.method === 'UPLOAD') {\r\n      delete _config.header['content-type']\r\n      delete _config.header['Content-Type']\r\n      let otherConfig = {\r\n        // #ifdef MP-ALIPAY\r\n        fileType: config.fileType,\r\n        // #endif\r\n        filePath: config.filePath,\r\n        name: config.name\r\n      }\r\n      const optionalKeys = [\r\n        // #ifdef APP-PLUS || H5\r\n        'files',\r\n        // #endif\r\n        // #ifdef H5\r\n        'file',\r\n        // #endif\r\n        // #ifdef H5 || APP-PLUS || MP-WEIXIN || MP-ALIPAY || MP-TOUTIAO || MP-KUAISHOU\r\n        'timeout',\r\n        // #endif\r\n        'formData'\r\n      ]\r\n      requestTask = uni.uploadFile({..._config, ...otherConfig, ...mergeKeys(optionalKeys, config)})\r\n    } else if (config.method === 'DOWNLOAD') {\r\n      const optionalKeys = [\r\n        // #ifdef H5 || APP-PLUS || MP-WEIXIN || MP-ALIPAY || MP-TOUTIAO || MP-KUAISHOU\r\n        'timeout',\r\n        // #endif\r\n        // #ifdef MP\r\n        'filePath',\r\n        // #endif\r\n      ]\r\n      requestTask = uni.downloadFile({..._config, ...mergeKeys(optionalKeys, config)})\r\n    } else {\r\n      const optionalKeys = [\r\n        'data',\r\n        'method',\r\n        // #ifdef H5 || APP-PLUS || MP-ALIPAY || MP-WEIXIN\r\n        'timeout',\r\n        // #endif\r\n        'dataType',\r\n        // #ifndef MP-ALIPAY\r\n        'responseType',\r\n        // #endif\r\n        // #ifdef APP-PLUS\r\n        'sslVerify',\r\n        // #endif\r\n        // #ifdef H5\r\n        'withCredentials',\r\n        // #endif\r\n        // #ifdef APP-PLUS\r\n        'firstIpv4',\r\n        // #endif\r\n        // #ifdef MP-WEIXIN\r\n        'enableHttp2',\r\n        'enableQuic',\r\n        // #endif\r\n        // #ifdef MP-TOUTIAO || MP-WEIXIN\r\n        'enableCache',\r\n        // #endif\r\n        // #ifdef MP-WEIXIN\r\n        'enableHttpDNS',\r\n        'httpDNSServiceId',\r\n        'enableChunked',\r\n        'forceCellularNetwork',\r\n        // #endif\r\n        // #ifdef MP-ALIPAY\r\n        'enableCookie',\r\n        // #endif\r\n        // #ifdef MP-BAIDU\r\n        'cloudCache',\r\n        'defer'\r\n        // #endif\r\n      ]\r\n      requestTask = uni.request({..._config, ...mergeKeys(optionalKeys, config)})\r\n    }\r\n    if (config.getTask) {\r\n      config.getTask(requestTask, config)\r\n    }\r\n  })\r\n}\r\n"],"names":["isUndefined","buildURL","buildFullPath","settle","uni"],"mappings":";;;;;;AAWA,MAAM,YAAY,CAAC,MAAM,YAAY;AACnC,MAAI,SAAS,CAAE;AACf,OAAK,QAAQ,UAAQ;AACnB,QAAI,CAACA,wBAAW,YAAC,QAAQ,IAAI,CAAC,GAAG;AAC/B,aAAO,IAAI,IAAI,QAAQ,IAAI;AAAA,IAC5B;AAAA,EACL,CAAG;AACD,SAAO;AACT;AACA,MAAe,UAAA,CAAC,WAAW;AACzB,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI,WAAWC,mCAAAA,SAASC,qCAAa,cAAC,OAAO,SAAS,OAAO,GAAG,GAAG,OAAO,QAAQ,OAAO,gBAAgB;AACzG,UAAM,UAAU;AAAA,MACd,KAAK;AAAA,MACL,QAAQ,OAAO;AAAA,MACf,UAAU,CAAC,aAAa;AACtB,eAAO,WAAW;AAClB,iBAAS,SAAS;AAClB,iBAAS,UAAU,SAAS;AAC5B,YAAI;AACF,cAAI,kBAAkB;AACtB,gBAAM,wBAAwB,OAAO,OAAO;AAC5C,cAAI,0BAA0B,WAAW;AACvC,8BAAkB,OAAO;AAAA,UACrC,WAAqB,0BAA0B,UAAU;AAC7C,kBAAM,iBAAiB,OAAO,kBAAkB,WAAW,CAAE;AAC7D,8BAAkB,eAAe,SAAS,OAAO,MAAM;AAAA,UACxD;AAGD,cAAI,mBAAmB,OAAO,SAAS,SAAS,UAAU;AACxD,qBAAS,OAAO,KAAK,MAAM,SAAS,IAAI;AAAA,UACzC;AAAA,QAEF,SAAQ,GAAG;AAAA,QACX;AACDC,6CAAO,SAAS,QAAQ,QAAQ;AAAA,MACjC;AAAA,IACF;AACD,QAAI;AACJ,QAAI,OAAO,WAAW,UAAU;AAC9B,aAAO,QAAQ,OAAO,cAAc;AACpC,aAAO,QAAQ,OAAO,cAAc;AACpC,UAAI,cAAc;AAAA,QAIhB,UAAU,OAAO;AAAA,QACjB,MAAM,OAAO;AAAA,MACd;AACD,YAAM,eAAe;AAAA,QAQnB;AAAA,QAEA;AAAA,MACD;AACD,oBAAcC,cAAG,MAAC,WAAW,EAAC,GAAG,SAAS,GAAG,aAAa,GAAG,UAAU,cAAc,MAAM,EAAC,CAAC;AAAA,IACnG,WAAe,OAAO,WAAW,YAAY;AACvC,YAAM,eAAe;AAAA,QAEnB;AAAA,QAGA;AAAA,MAED;AACD,oBAAcA,cAAAA,MAAI,aAAa,EAAC,GAAG,SAAS,GAAG,UAAU,cAAc,MAAM,EAAC,CAAC;AAAA,IACrF,OAAW;AACL,YAAM,eAAe;AAAA,QACnB;AAAA,QACA;AAAA,QAEA;AAAA,QAEA;AAAA,QAEA;AAAA,QAYA;AAAA,QACA;AAAA,QAGA;AAAA,QAGA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MASD;AACD,oBAAcA,cAAAA,MAAI,QAAQ,EAAC,GAAG,SAAS,GAAG,UAAU,cAAc,MAAM,EAAC,CAAC;AAAA,IAC3E;AACD,QAAI,OAAO,SAAS;AAClB,aAAO,QAAQ,aAAa,MAAM;AAAA,IACnC;AAAA,EACL,CAAG;AACH;;"}